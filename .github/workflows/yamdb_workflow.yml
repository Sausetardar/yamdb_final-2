name: Yamdb workoflow

on: [push]

jobs:
  # tests:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Set up Python 
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.8

  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install flake8 pytest
  #       pip install -r requirements.txt
  #   - name: Lint with flake8
  #     run: flake8 . --ignore D501 --exclude *tests/,*migrations/
  #     continue-on-error: true
  #   - name: Test with pytest
  #     run: pytest


  build_and_push_to_docker_hub_postgres:
    name: Push Docker image postgres to Docker Hub
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        driver: docker
    -
      name: Debug
      run: |
        ls -lah
        docker ps
    -
      name: Build
      run: |
        cp .env.example .env
        docker-compose up -d db
        
    -
      name: Login
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    -
      name: tag
      run: docker tag postgres:12.4 sorochinskii/yamdb_final_db
    -
      name: Push
      run: docker push sorochinskii/yamdb_final_db

  build_and_push_to_docker_hub_web:
      name: Push Docker image to Docker Hub
      needs: build_and_push_to_docker_hub_postgres
      runs-on: ubuntu-latest
      steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker
      -
        name: Debug
        run: |
          ls -lah
          docker ps
      -
        name: Build
        run: |
          cp .env.example .env
          docker-compose up -d web
      -
        name: Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: tag
        run: docker tag yamdb_final_web sorochinskii/yamdb_final_web 
      -
        name: Push
        run: docker push sorochinskii/yamdb_final_web

  build_and_push_to_docker_hub_nginx:
    name: Push Docker image nginx to Docker Hub
    needs: build_and_push_to_docker_hub_web
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        driver: docker
    -
      name: Debug
      run: |
        ls -lah
        docker ps
    -
      name: Build
      run: |
        cp .env.example .env
        docker-compose up -d nginx
    -
      name: Login
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    -
      name: tag
      run: docker tag nginx sorochinskii/yamdb_final_nginx 
    -
      name: Push
      run: docker push sorochinskii/yamdb_final_nginx
    
  # deploy:
  #    runs-on: ubuntu-latest
      #  needs: build_and_push_to_docker_hub_nginx
  #    steps:
  #    - name: executing remote ssh commands to deploy
  #      uses: appleboy/ssh-action@master
  #      with:
  #        host: ${{ secrets.HOST }}
  #        username: ${{ secrets.USER }}
  #        key: ${{ secrets.SSH_KEY }}
  #        port: ${{ secrets.PORT }} 
  #        passphrase: ${{ secrets.SSH_PASSPHRASE }}
  #        script: |
  #          echo ${{ secrets.DEV_USER_PASSWORD }} | sudo -S docker pull sorochinskii/test
  #          echo ${{ secrets.DEV_USER_PASSWORD }} | sudo -S docker stop $(echo ${{ secrets.DEV_USER_PASSWORD }} | sudo -S docker ps -a -q)
  #          echo ${{ secrets.DEV_USER_PASSWORD }} | sudo -S docker run --rm -d -p 80:80 sorochinskii/test

  # send_message:
  #   runs-on: ubuntu-latest
  #   # needs: deploy
  #   steps:
  #   - name: send message
  #     uses: appleboy/telegram-action@master
  #     with:
  #       to: ${{ secrets.TELEGRAM_TO }}
  #       token: ${{ secrets.TELEGRAM_TOKEN }}
  #       message: ${{ github.workflow }} успешно выполнен! 